<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.0">Jekyll</generator><link href="/HaloTAS/feed.xml" rel="self" type="application/atom+xml" /><link href="/HaloTAS/" rel="alternate" type="text/html" /><updated>2019-10-19T15:25:58-04:00</updated><id>/HaloTAS/feed.xml</id><title type="html">HaloTAS</title><entry><title type="html">Get Up, So I Can Kill You Again!</title><link href="/HaloTAS/halo/2019/10/18/get-up-so-i-can-kill-you-again.html" rel="alternate" type="text/html" title="Get Up, So I Can Kill You Again!" /><published>2019-10-18T00:00:00-04:00</published><updated>2019-10-18T00:00:00-04:00</updated><id>/HaloTAS/halo/2019/10/18/get-up-so-i-can-kill-you-again</id><content type="html" xml:base="/HaloTAS/halo/2019/10/18/get-up-so-i-can-kill-you-again.html">&lt;p&gt;Today weâ€™re going to go back in time! (Warning: contains eurobeat):&lt;/p&gt;

&lt;iframe width=&quot;640&quot; height=&quot;360&quot; src=&quot;https://www.youtube.com/embed/iyX9cpZZ-AI&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;As you can hopefully see, progress is going well on the rewind feature in HaloTAS. We can now easily go forward and backward in time which greatly helps with iteration time on TAS files.&lt;/p&gt;

&lt;p&gt;You may notice the screen is shaking a bit in the video, which is not an effect I added. Any screen effect that you incur over the course of re-playing a demo will persist until it is rendered to completion, including: AR shots, grenade blasts (flashes screen yellow), taking damage (flashes screen red), and some scripted events.&lt;/p&gt;

&lt;p&gt;During a fast-forward, we disable the renderer to greatly speed up the time it takes to simulate ticks by not issuing any draw calls for each frame. A side effect of this is that the screen effect timers never advance through their animations and will end up stacking on top of each other. Effects can range from annoying to unplayable, such as grenade explosions:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/HaloTAS/assets/screen_effect_explosion.jpg&quot; alt=&quot;screen_effect_explosion.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Until I find a true way to disable screen effects without drastically editing game files, Iâ€™ve implemented a workaround that works fairly well. The process to fast-forward to tick 1000 would be:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Reset the map&lt;/li&gt;
  &lt;li&gt;Disable the renderer&lt;/li&gt;
  &lt;li&gt;Simulate ticks 0 - 940&lt;/li&gt;
  &lt;li&gt;Enable the renderer, but disable framebuffer updates&lt;/li&gt;
  &lt;li&gt;Simulate ticks 941 - 1000&lt;/li&gt;
  &lt;li&gt;Enable screen updates&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We spend the last 60 ticks rendering to nowhere&lt;sup&gt;1&lt;/sup&gt;, but doing it this way lets screen effects run to completion and provides us with a smooth transition when traversing through time:&lt;/p&gt;

&lt;iframe width=&quot;640&quot; height=&quot;360&quot; src=&quot;https://www.youtube.com/embed/LUNra1tLzT4&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;timesplitters&quot;&gt;TimeSplitters&lt;/h3&gt;

&lt;p&gt;While working on these time-altering tools, we made an interesting discovery&lt;sup&gt;2&lt;/sup&gt;: disabling or enabling sound actually changes how the game runs. To understand why this is, we first need to discuss how the flow of time works in-game. From the start of a level, there are two paths we can take:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Skip the opening cutscene with Enter or Esc&lt;/li&gt;
  &lt;li&gt;Let the opening cutscene play to completion&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/HaloTAS/assets/tick_flowchart.png&quot; alt=&quot;tick_flowchart.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In speedrun/TAS gameplay, (1) is always preferred when possible as skipping the cutscene is faster. Around half of levels do not have skippable opening cutscenes so the (2) path is taken in those cases. By skipping the cutscene we are re-setting the timeline back to Tick 2, but not &lt;em&gt;completely&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;There exists a single global RNG value that is referenced by every consumer of RNG in the game. This RNG value is only ever directly set when the map is restarted. Every time an RNG roll is consumed, the RNG counter advances forward. In heavy firefights and intense scenes, this value may be advanced hundreds to thousands of times per second.&lt;/p&gt;

&lt;p&gt;To loop back around to how sound affects the game, here are the tick sequences for two scenarios. Both scenarios restart the map and press enter on Tick 2, the first possible tick to skip the opening cutscene. Blue ticks represent time spent in cutscene, while the red tick is the first tick of player control.&lt;/p&gt;

&lt;p&gt;Sound Enabled : 0 - 1 - &lt;span style=&quot;color:blue&quot;&gt;2&lt;/span&gt; - &lt;span style=&quot;color:red&quot;&gt;2&lt;/span&gt; - 3 - 4 â€¦ &lt;br /&gt;
Sound Disabled: 0 - 1 - &lt;span style=&quot;color:blue&quot;&gt;2 - 3 - 4 - 5 - 6 - 7 - 8&lt;/span&gt; - &lt;span style=&quot;color:red&quot;&gt;2&lt;/span&gt; - 3 - 4 â€¦&lt;/p&gt;

&lt;p&gt;With sound disabled, we spend 6 extra ticks in the cutscene. During those 6 ticks, events are occuring that advance the RNG counter. When we resume player control, the differing RNG sequence will cause the simulation to diverge and result in a desync. We are still investigating WHY this is the case, but for the time being we need to leave the sound system enabled for our TAS adventures. This is especially unfortunate for the fast-forward utilities of the TAS as disabling the sound system speeds up fast-forward by around 50%.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;-lets-get-random-&quot;&gt;ðŸŽ² Letâ€™s Get Random ðŸŽ²&lt;/h3&gt;

&lt;p&gt;As Iâ€™ve been finding interesting changes that can be made to the game, I add them to a list to eventually build a randomizer. The list is growing pretty fast, so this may be something I put more effort into sooner since it is more applicable to the community overall than the TAS tools.&lt;/p&gt;

&lt;p&gt;Tiny chief is my favorite ability so far:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/HaloTAS/assets/me_and_my_son.jpg&quot; alt=&quot;me_and_my_son.jpg&quot; /&gt;&lt;/p&gt;

&lt;iframe width=&quot;640&quot; height=&quot;360&quot; src=&quot;https://www.youtube.com/embed/KPMdsovyeT8&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;moving-forward&quot;&gt;Moving Forward&lt;/h3&gt;

&lt;p&gt;The focus for the next few updates is going to be on tackling the remaining sources of desync and general tool usability. I would like to make a public release by the end of the year should the project be in a state that I deem appropriate. I do not want to prematurely release tools that become incompatible or create replays that are not truly repeatable.&lt;/p&gt;

&lt;p&gt;~Scales&lt;/p&gt;

&lt;p&gt;&lt;sup&gt;1&lt;/sup&gt; Using Game Capture in OBS you can actually see the last 60 frames rendering in the preview, but the Halo window itself does not update. Window Capture works appropriately.&lt;/p&gt;

&lt;p&gt;&lt;sup&gt;2&lt;/sup&gt; When I brought this up in the community, some people already knew that disabling sound could have adverse effects like more crashes, but not the specifics of what was affected.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/Scaless/HaloTAS&quot;&gt;github.com/Scaless/HaloTAS&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you would like to support my projects, check out my &lt;a href=&quot;https://www.patreon.com/scalesllc&quot;&gt;Patreon&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><summary type="html">Today weâ€™re going to go back in time! (Warning: contains eurobeat):</summary></entry><entry><title type="html">Fast Isnâ€™t Fast Enough</title><link href="/HaloTAS/halo/2019/10/13/fast-isnt-fast-enough.html" rel="alternate" type="text/html" title="Fast Isn't Fast Enough" /><published>2019-10-13T12:18:04-04:00</published><updated>2019-10-13T12:18:04-04:00</updated><id>/HaloTAS/halo/2019/10/13/fast-isnt-fast-enough</id><content type="html" xml:base="/HaloTAS/halo/2019/10/13/fast-isnt-fast-enough.html">&lt;p&gt;&lt;a href=&quot;https://github.com/Scaless/HaloTAS&quot;&gt;github.com/Scaless/HaloTAS&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you would like to support my projects, check out my &lt;a href=&quot;https://www.patreon.com/scalesllc&quot;&gt;Patreon&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Recently a new geo-bump (teleporting your character with level geometry) was found on the level Keyes. If you are not entirely familiar with Halo 1 speedrunning, Keyes is by far the most optimized speedrun level in the game. The current IL record for Keyes on Easy difficulty is 2 minutes and 18 seconds. With current strats we think it is theoretically possible to get a 2:17 with perfect RNG and movement.&lt;/p&gt;

&lt;p&gt;The new geo-bump strategy is very difficult to pull off consistently. In 200 attempts I was only able to do it twice. It requires incredibly precise movement and look direction while being inside of a wall with no currently consistent human-possible setup.&lt;/p&gt;

&lt;p&gt;I used this as an opportunity to test the viability of this strat with HaloTAS. Given how optimized the level is, shaving off even a second is quite considerable.&lt;/p&gt;

&lt;p&gt;This TAS recording represents an â€˜averageâ€™ flood bump and a frame perfect geo-bump:&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/w64Q50cA-8M&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;Unfortuntely, the strat wastes too much time setting up the 2nd bump and is just too inconsistent to be viable to use in ILs. Even in a TAS run with perfectly manipulated RNG it may still be slower than the normal out of bounds platforming.&lt;/p&gt;

&lt;p&gt;For me however, this was an amazing test of HaloTAS. The recording utilizes all of the core aspects of the game:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Player movement and view angles&lt;/li&gt;
  &lt;li&gt;Enemy AI&lt;/li&gt;
  &lt;li&gt;Physics engine&lt;/li&gt;
  &lt;li&gt;RNG is manipulated correctly
    &lt;ul&gt;
      &lt;li&gt;AR spread is based on RNG, causing each bullet to be randomly distributed in a cone. The recording kills the grunt in the same way every time, even causing the same death animation. The amount of time that the flood takes to revive is also based on RNG.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I was pretty happy with this recording, but I wanted to go &lt;em&gt;faster&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;One of the main pain points of the current TAS tools is iteration time. Starting input in a new TAS is simple enough, but once you are dozens of seconds into a level it is tedious to constantly restart the level in real-time. Most levels are several minutes long, so this had to be addressed eventually.&lt;/p&gt;

&lt;p&gt;My first attempt to improve iteration speed was to use the internal Halo engine functions &lt;code class=&quot;highlighter-rouge&quot;&gt;core_save&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;core_load&lt;/code&gt;. &lt;code class=&quot;highlighter-rouge&quot;&gt;core_save&lt;/code&gt; takes a snapshot of game state and saves it to a file, while &lt;code class=&quot;highlighter-rouge&quot;&gt;core_load&lt;/code&gt; restores state from that file. Immediately I ran into problems doing this:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The snapshot of game state does not include RNG, so the sequence will immediately be out of sync after loading a &lt;code class=&quot;highlighter-rouge&quot;&gt;core_save&lt;/code&gt;. I resolved this by saving the RNG state in the application and restoring it after the game is reverted.&lt;/li&gt;
  &lt;li&gt;The engine only maintains one &lt;code class=&quot;highlighter-rouge&quot;&gt;core.bin&lt;/code&gt; file that state is saved to. When you &lt;code class=&quot;highlighter-rouge&quot;&gt;core_save&lt;/code&gt; it overwrites this file with the new state.&lt;/li&gt;
  &lt;li&gt;If you &lt;code class=&quot;highlighter-rouge&quot;&gt;core_load&lt;/code&gt; on a different map than the one you saved on, the game crashes.&lt;/li&gt;
  &lt;li&gt;Your last input state is preserved after a &lt;code class=&quot;highlighter-rouge&quot;&gt;core_load&lt;/code&gt;. For example: if you are holding W when you issue the &lt;code class=&quot;highlighter-rouge&quot;&gt;core_load&lt;/code&gt;, you will be holding W when the revert occurs. If you were not holding W on the tick that you loaded into, youâ€™ve now desynced. I wasted a ton of time working on desynced files before figuring this out.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the long run this system wasnâ€™t going to work. I started messing around in &lt;a href=&quot;https://www.nsa.gov/resources/everyone/ghidra/&quot;&gt;Ghidra&lt;/a&gt; looking for alternatives.&lt;/p&gt;

&lt;p&gt;If we want to simulate 10000 ticks quickly to get to the end of a recording, you might wonder why we canâ€™t just call the tick function directly.&lt;/p&gt;

&lt;p&gt;Normally Halo 1 is limited to 30 ticks/second. In each tick, engine components are updated: physics, AI, movement, scripts, etc. Mouse/keyboard/gamepad input, however, is tracked on a per-frame basis. Since the game is capable of running at an unlocked framerate, your view needs to update at a faster rate so it is interpolated from your inputs. If we called the tick function directly, we would not get updated input information and end up with 10000 ticks of the same input which is quite useless.&lt;/p&gt;

&lt;p&gt;One of the features of Halo PC is the launch flag &lt;code class=&quot;highlighter-rouge&quot;&gt;-timedemo&lt;/code&gt;. When you start the game with this flag, it will immediately play through the opening cutscene of a few levels then close the game and save a file with some FPS benchmark information (you can see my results &lt;a href=&quot;/HaloTAS/assets/timedemo.txt&quot;&gt;here!&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;I noticed that using &lt;code class=&quot;highlighter-rouge&quot;&gt;-timedemo&lt;/code&gt; you are not restricted to 30 ticks/second! This makes sense as it wants to run as fast as possible for a good benchmark result.&lt;/p&gt;

&lt;p&gt;By twiddling a few bits in the tick handling system we can trick the game into thinking we are in benchmark mode, allowing us to run the game at &lt;em&gt;incredible hihg speed&lt;/em&gt; while maintaining input integrity. This is the same input sequence as the previous video, but with the new benchmark system:&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/xSPpZSJTSkI&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;With this new system we can quickly advance to a specific tick anywhere in the playback within seconds, and I can finally strip out the flawed &lt;code class=&quot;highlighter-rouge&quot;&gt;core_x&lt;/code&gt; utilities.&lt;/p&gt;

&lt;p&gt;This is my first â€˜blogâ€™ post on this project, let me know if I should keep making these in the future.&lt;/p&gt;

&lt;p&gt;~Scales&lt;/p&gt;</content><author><name></name></author><summary type="html">github.com/Scaless/HaloTAS</summary></entry></feed>